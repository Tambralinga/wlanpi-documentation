{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the WLAN Pi Documentation Project Welcome to the WLAN Pi documentation site. The WLAN Pi initiative started at the Wireless LAN Professionals Conference in 2016. Since then, the WLAN Pi has grown in to a popular addition to the toolset of many WLAN engineers. The project is constantly adding and improving the tools available on the WLAN Pi platform to provide a richer toolset to our loyal base of users. This site has been created to provide supporting documentation to the project, to make the WLAN Pi even more accessible to new and existing users. On this site we will provide information to enable you to buy or build your own WLAN Pi, detail the packages available on the current WLAN Pi image and provide update information about the WLAN Pi project. Info If you're new to the WLAN Pi project, a great place to start is our Getting Started page. Attention Check out common queries in our FAQ section","title":"Home"},{"location":"#welcome-to-the-wlan-pi-documentation-project","text":"Welcome to the WLAN Pi documentation site. The WLAN Pi initiative started at the Wireless LAN Professionals Conference in 2016. Since then, the WLAN Pi has grown in to a popular addition to the toolset of many WLAN engineers. The project is constantly adding and improving the tools available on the WLAN Pi platform to provide a richer toolset to our loyal base of users. This site has been created to provide supporting documentation to the project, to make the WLAN Pi even more accessible to new and existing users. On this site we will provide information to enable you to buy or build your own WLAN Pi, detail the packages available on the current WLAN Pi image and provide update information about the WLAN Pi project. Info If you're new to the WLAN Pi project, a great place to start is our Getting Started page. Attention Check out common queries in our FAQ section","title":"Welcome to the WLAN Pi Documentation Project"},{"location":"about/","text":"About The WLAN Pi project started in 2016 at WLPC . The goal was to create a portable, ready-to-use device that could function as a network endpoint for measuring network performance and throughput. Since then, it has been widely embraced in the awesome wireless community and after many contributions, this tiny box has evolved well beyond a network performance testing device. Today, it can also be used as a remote Wi-Fi scanner, packet capture tool, portable Wi-Fi signal generator and much more! These capabilities assist wireless professionals with designing better wireless networks, troubleshooting issues more quickly, and validating wireless network performance. Hardware There are two main component parts to the WLAN Pi: a NEO2 hardware platform and a wireless adapter. Other useful assessories are available, but these are the two must-have components to get yourself up and running with a WLAN Pi. See our Getting Started page to find out how you can get your own WLAN Pi setup. NEO2 At the heart of the WLAN Pi is the NanoPi NEO2, a super tiny quad-core single-board computer (SBC). The NanoPi NEO2 shares some similarities to the more well known Raspberry Pi, however the NanoPi is less than \u00bd its size, consumes less power, and it can push over 900 Mbps over its gigabit ethernet connection. Specs: CPU: Allwinner H5, Quad-core 64-bit high-performance Cortex A53 DDR3 RAM: 1GB Storage: microSD (16 GB card included), can be expanded up to 128GB More info: http://wiki.friendlyarm.com/wiki/index.php/NanoPi_NEO2 Wi-Fi Adapter The Wi-Fi adapter is a Comfast CF-912ac. It uses the Realtek rtl8812au chipset, one of the few 802.11ac chipsets that support monitor mode and packet injection in linux. Specs: Dual-band, 2x2:2, 802.11ac","title":"About"},{"location":"about/#about","text":"The WLAN Pi project started in 2016 at WLPC . The goal was to create a portable, ready-to-use device that could function as a network endpoint for measuring network performance and throughput. Since then, it has been widely embraced in the awesome wireless community and after many contributions, this tiny box has evolved well beyond a network performance testing device. Today, it can also be used as a remote Wi-Fi scanner, packet capture tool, portable Wi-Fi signal generator and much more! These capabilities assist wireless professionals with designing better wireless networks, troubleshooting issues more quickly, and validating wireless network performance.","title":"About"},{"location":"about/#hardware","text":"There are two main component parts to the WLAN Pi: a NEO2 hardware platform and a wireless adapter. Other useful assessories are available, but these are the two must-have components to get yourself up and running with a WLAN Pi. See our Getting Started page to find out how you can get your own WLAN Pi setup.","title":"Hardware"},{"location":"about/#neo2","text":"At the heart of the WLAN Pi is the NanoPi NEO2, a super tiny quad-core single-board computer (SBC). The NanoPi NEO2 shares some similarities to the more well known Raspberry Pi, however the NanoPi is less than \u00bd its size, consumes less power, and it can push over 900 Mbps over its gigabit ethernet connection. Specs: CPU: Allwinner H5, Quad-core 64-bit high-performance Cortex A53 DDR3 RAM: 1GB Storage: microSD (16 GB card included), can be expanded up to 128GB More info: http://wiki.friendlyarm.com/wiki/index.php/NanoPi_NEO2","title":"NEO2"},{"location":"about/#wi-fi-adapter","text":"The Wi-Fi adapter is a Comfast CF-912ac. It uses the Realtek rtl8812au chipset, one of the few 802.11ac chipsets that support monitor mode and packet injection in linux. Specs: Dual-band, 2x2:2, 802.11ac","title":"Wi-Fi Adapter"},{"location":"faq/","text":"FAQ Where can I get the latest WLAN Pi image? The latest WLAN Pi image is available here (avoid the alpha releases, they are unstable, development builds, Beta are usually pretty good but may have the odd bug) How do I find which image version is currently installed on my WLAN? If you look on the top-level \"home\" page of the front panel display, the version number of the image should be shown on the top left of the display. If you see no version number, it may be that you have quite an old version of image. If you have network connectivity to the WLAN Pi, browse to it (192.168.42.1 if you're on the USB OTG connection) and look at the top of the web page to see the image version. How do I burn a WLAN Pi image? If you'd like to burn a WLAN Pi image on to a kit you've bought or update the image of your existing WLAN Pi, here is a video explaining the process: How do I change the password for the wlanpi user Changing the default password for the wlanpi user is highly recommended to help secure your unit. To change from the default password (which is 'wlanpi'), SSH to the WLANP Pi and use the 'passwd' command as follows: wlanpi@wlanpi:~$ passwd Changing password for wlanpi. (current) UNIX password: wlanpi Enter new UNIX password: <enter new pwd> Retype new UNIX password: <enter new pwd again> passwd: password updated successfully wlanpi@wlanpi:~$ If connecting the WLAN Pi to any network, changing the default password should be a top priority. If the WLAN Pi becomes compromised as default credentials have been left in place, this could have very serious consequences. How do I change the hostname of my WLAN Pi By default, the hostname of your WLAN Pi is : wlanpi If you'd like to change this to a more meaningful hostname, then you will need to SSH to your WLAN Pi and update the /etc/hostname and /etc/hosts files, followed by a reboot of the WLAN Pi: Edit the /etc/hostname file using the command: sudo nano /etc/hostname There is a single line that says 'wlanpi'. Change this to your required hostname. Then hit Ctrl-X and \"y\" to save your changes. Alternatively, you may also use the following CLI command to achieve the same result: sudo hostnamectl set-hostname <name> Whichever method is used to update the hostname file, next edit the /etc/hosts file: sudo nano /etc/hosts Change each instance of 'wlanpi' to the new hostname (there are usually two instances). Then hit Ctrl-X and \"y\" to save your changes. Finally, reboot your WLAN Pi: sudo reboot How do I set the timezone on my WLAN Pi? From the CLI of your WLAN Pi: sudo dpkg-reconfigure tzdata How do I connect my WLAN Pi to my wireless network? Assuming your network uses a PSK, simply edit the following files: /etc/network/interfaces /etc/wpa_supplicant/wpa_supplicant.conf /etc/network/interfaces Edit the file as follows: sudo nano /etc/network/interfaces Edit the following section of the file for wlan0: # Wireless adapter #1 # Armbian ships with network-manager installed by default. To save you time # and hassles consider using 'sudo nmtui' instead of configuring Wi-Fi settings # manually. The below lines are only meant as an example how configuration could # be done in an anachronistic way: # allow-hotplug wlan0 iface wlan0 inet dhcp #address 192.168.0.100 #netmask 255.255.255.0 #gateway 192.168.0.1 #dns-nameservers 8.8.8.8 8.8.4.4 # wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf # Disable power saving on compatible chipsets (prevents SSH/connection dropouts over WiFi) wireless-mode Monitor #wireless-power off Remove the \"#\" character from the start of the line: # wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf Save the file by hitting CTRL-x /etc/wpa_supplicant/wpa_supplicant.conf Edit the file as follows: sudo nano /etc/wpa_supplicant/wpa_supplicant.conf <make your changes> CTRL-x Enter your SSID and PSK in the areas indicated in the file. For the new settings to take effect, you have 3 options: Unplug and re-insert your USB wireless NIC Issue the following command on the WLAN Pi CLI : sudo ifdown wlan0; sudo ifup wlan0 Reboot your WLAN Pi (remove the power or issue the sudo reboot command on the CLI) (For other security methods, look in the following file for configuration examples: /home/wlanpi/wiperf/conf/etc/wpa_supplicant/wpa_supplicant.conf) I'm having difficult getting a connection over the USB link to my WLAN Pi? What's going on? The WLAN Pi has a very useful feature that allows you to connect your Mac or Window machine to a WAN Pi via a USB connection. This is effectively an Ethernet over USB connection, also known as an OTG connection (On The Go). This requires a USB to micro-USB cable to hook up your laptop/Mac to the micro-USB socket on the WLAN Pi (which is also used to power the WLAN Pi). This is very cool as it both powers up your WLAN Pi and gives you a local network connection to the WLAN Pi so that you can SSH or browse in to it. There are two main issues we have seen with connectivity over the OTG connection: Some cables that look like an OTG cable (i.e. a regular USB plug on one end and a micro-USB on the other) are, in fact, just phone charger cables and only have the power wires through. This means there are no data wires and you can never establish the OTG connection. The WLAN Pi will power up, but the OTG connection will not work. (You can check if you have an OTG connection by looking at the network interfaces on your laptop/Mac - if OTG is working, a new Ethernet port automagically appears.) If you hit this issue, try another cable (or two) The second issue we hear about impacts Windows users. Please check out this super blog post if you have a Windows laptop and you think your cable is good: Blog Post Link Which wireless adapters are supported on the WLAN Pi ? Up to image version (but not including) v1.9, the only WLAN chipset supported was the Realtek 8812au. The Comfast CF-912AC was the only adapter that had been tested to provide support for all WLAN Pi features. From v1.9 onwards, support for the Realtek 8812au chipset continued, but a driver for the MediaTek mt7610u chipset was also added. Testing was performed with a wide range of adapters using both chipsets. The range of features supported varied quite widely and the CF-912AC is still the only adapter that supports all features. However, other adapters do work to varying degrees and an alternative adapter may meet your needs. The testing results showing the adapters tested and the WLAN Pi features that work with each one are shown in this sheet: link (In a future version of the WLAN Pi image, there will be far more extensive support of features for MediaTek adapters that will be provided by a kernel update within the image.) Where can I get help support with my WLAN Pi? Support is on a volunteer/best efforts basis by project volunteers. Try here How do I suggest a new feature for the WLAN Pi? If you have a feature suggestion for the WLAN Pi, please get along to the GitHub site for the project and open an issue ticket with your suggestion: link (this will need a (free) GitHub account to create an issue)","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#where-can-i-get-the-latest-wlan-pi-image","text":"The latest WLAN Pi image is available here (avoid the alpha releases, they are unstable, development builds, Beta are usually pretty good but may have the odd bug)","title":"Where can I get the latest WLAN Pi image?"},{"location":"faq/#how-do-i-find-which-image-version-is-currently-installed-on-my-wlan","text":"If you look on the top-level \"home\" page of the front panel display, the version number of the image should be shown on the top left of the display. If you see no version number, it may be that you have quite an old version of image. If you have network connectivity to the WLAN Pi, browse to it (192.168.42.1 if you're on the USB OTG connection) and look at the top of the web page to see the image version.","title":"How do I find which image version is currently installed on my WLAN?"},{"location":"faq/#how-do-i-burn-a-wlan-pi-image","text":"If you'd like to burn a WLAN Pi image on to a kit you've bought or update the image of your existing WLAN Pi, here is a video explaining the process:","title":"How do I burn a WLAN Pi image?"},{"location":"faq/#how-do-i-change-the-password-for-the-wlanpi-user","text":"Changing the default password for the wlanpi user is highly recommended to help secure your unit. To change from the default password (which is 'wlanpi'), SSH to the WLANP Pi and use the 'passwd' command as follows: wlanpi@wlanpi:~$ passwd Changing password for wlanpi. (current) UNIX password: wlanpi Enter new UNIX password: <enter new pwd> Retype new UNIX password: <enter new pwd again> passwd: password updated successfully wlanpi@wlanpi:~$ If connecting the WLAN Pi to any network, changing the default password should be a top priority. If the WLAN Pi becomes compromised as default credentials have been left in place, this could have very serious consequences.","title":"How do I change the password for the wlanpi user"},{"location":"faq/#how-do-i-change-the-hostname-of-my-wlan-pi","text":"By default, the hostname of your WLAN Pi is : wlanpi If you'd like to change this to a more meaningful hostname, then you will need to SSH to your WLAN Pi and update the /etc/hostname and /etc/hosts files, followed by a reboot of the WLAN Pi: Edit the /etc/hostname file using the command: sudo nano /etc/hostname There is a single line that says 'wlanpi'. Change this to your required hostname. Then hit Ctrl-X and \"y\" to save your changes. Alternatively, you may also use the following CLI command to achieve the same result: sudo hostnamectl set-hostname <name> Whichever method is used to update the hostname file, next edit the /etc/hosts file: sudo nano /etc/hosts Change each instance of 'wlanpi' to the new hostname (there are usually two instances). Then hit Ctrl-X and \"y\" to save your changes. Finally, reboot your WLAN Pi: sudo reboot","title":"How do I change the hostname of my WLAN Pi"},{"location":"faq/#how-do-i-set-the-timezone-on-my-wlan-pi","text":"From the CLI of your WLAN Pi: sudo dpkg-reconfigure tzdata","title":"How do I set the timezone on my WLAN Pi?"},{"location":"faq/#how-do-i-connect-my-wlan-pi-to-my-wireless-network","text":"Assuming your network uses a PSK, simply edit the following files: /etc/network/interfaces /etc/wpa_supplicant/wpa_supplicant.conf","title":"How do I connect my WLAN Pi to my wireless network?"},{"location":"faq/#etcnetworkinterfaces","text":"Edit the file as follows: sudo nano /etc/network/interfaces Edit the following section of the file for wlan0: # Wireless adapter #1 # Armbian ships with network-manager installed by default. To save you time # and hassles consider using 'sudo nmtui' instead of configuring Wi-Fi settings # manually. The below lines are only meant as an example how configuration could # be done in an anachronistic way: # allow-hotplug wlan0 iface wlan0 inet dhcp #address 192.168.0.100 #netmask 255.255.255.0 #gateway 192.168.0.1 #dns-nameservers 8.8.8.8 8.8.4.4 # wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf # Disable power saving on compatible chipsets (prevents SSH/connection dropouts over WiFi) wireless-mode Monitor #wireless-power off Remove the \"#\" character from the start of the line: # wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf Save the file by hitting CTRL-x","title":"/etc/network/interfaces"},{"location":"faq/#etcwpa_supplicantwpa_supplicantconf","text":"Edit the file as follows: sudo nano /etc/wpa_supplicant/wpa_supplicant.conf <make your changes> CTRL-x Enter your SSID and PSK in the areas indicated in the file. For the new settings to take effect, you have 3 options: Unplug and re-insert your USB wireless NIC Issue the following command on the WLAN Pi CLI : sudo ifdown wlan0; sudo ifup wlan0 Reboot your WLAN Pi (remove the power or issue the sudo reboot command on the CLI) (For other security methods, look in the following file for configuration examples: /home/wlanpi/wiperf/conf/etc/wpa_supplicant/wpa_supplicant.conf)","title":"/etc/wpa_supplicant/wpa_supplicant.conf"},{"location":"faq/#im-having-difficult-getting-a-connection-over-the-usb-link-to-my-wlan-pi-whats-going-on","text":"The WLAN Pi has a very useful feature that allows you to connect your Mac or Window machine to a WAN Pi via a USB connection. This is effectively an Ethernet over USB connection, also known as an OTG connection (On The Go). This requires a USB to micro-USB cable to hook up your laptop/Mac to the micro-USB socket on the WLAN Pi (which is also used to power the WLAN Pi). This is very cool as it both powers up your WLAN Pi and gives you a local network connection to the WLAN Pi so that you can SSH or browse in to it. There are two main issues we have seen with connectivity over the OTG connection: Some cables that look like an OTG cable (i.e. a regular USB plug on one end and a micro-USB on the other) are, in fact, just phone charger cables and only have the power wires through. This means there are no data wires and you can never establish the OTG connection. The WLAN Pi will power up, but the OTG connection will not work. (You can check if you have an OTG connection by looking at the network interfaces on your laptop/Mac - if OTG is working, a new Ethernet port automagically appears.) If you hit this issue, try another cable (or two) The second issue we hear about impacts Windows users. Please check out this super blog post if you have a Windows laptop and you think your cable is good: Blog Post Link","title":"I'm having difficult getting a connection over the USB link to my WLAN Pi? What's going on?"},{"location":"faq/#which-wireless-adapters-are-supported-on-the-wlan-pi","text":"Up to image version (but not including) v1.9, the only WLAN chipset supported was the Realtek 8812au. The Comfast CF-912AC was the only adapter that had been tested to provide support for all WLAN Pi features. From v1.9 onwards, support for the Realtek 8812au chipset continued, but a driver for the MediaTek mt7610u chipset was also added. Testing was performed with a wide range of adapters using both chipsets. The range of features supported varied quite widely and the CF-912AC is still the only adapter that supports all features. However, other adapters do work to varying degrees and an alternative adapter may meet your needs. The testing results showing the adapters tested and the WLAN Pi features that work with each one are shown in this sheet: link (In a future version of the WLAN Pi image, there will be far more extensive support of features for MediaTek adapters that will be provided by a kernel update within the image.)","title":"Which wireless adapters are supported on the WLAN Pi ?"},{"location":"faq/#where-can-i-get-help-support-with-my-wlan-pi","text":"Support is on a volunteer/best efforts basis by project volunteers. Try here","title":"Where can I get help support with my WLAN Pi?"},{"location":"faq/#how-do-i-suggest-a-new-feature-for-the-wlan-pi","text":"If you have a feature suggestion for the WLAN Pi, please get along to the GitHub site for the project and open an issue ticket with your suggestion: link (this will need a (free) GitHub account to create an issue)","title":"How do I suggest a new feature for the WLAN Pi?"},{"location":"get_involved/","text":"Getting Involved with the WLANPi Project The WLANPi project is a community effort and we always welcome volunteers to contribute to our efforts. There are opportunities for coding, testing (no coding skills required) and documentation/web site support. To find out the different areas where you can help out, take a look at the following pages for more information: Coding for the WLAN Pi Contributing to development for non-coders Submitting bug reports Submitting feature/package suggestions If you'd like to be involved, please contact Jerry Olla or Nigel Bowden on Twitter or track them down via any well known search engine.","title":"Overview"},{"location":"get_involved/#getting-involved-with-the-wlanpi-project","text":"The WLANPi project is a community effort and we always welcome volunteers to contribute to our efforts. There are opportunities for coding, testing (no coding skills required) and documentation/web site support. To find out the different areas where you can help out, take a look at the following pages for more information: Coding for the WLAN Pi Contributing to development for non-coders Submitting bug reports Submitting feature/package suggestions If you'd like to be involved, please contact Jerry Olla or Nigel Bowden on Twitter or track them down via any well known search engine.","title":"Getting Involved with the WLANPi Project"},{"location":"get_involved_bugs/","text":"Getting Involved - Bug Reporting If you're a WLAN Pi user and you think you spot a bug that we need to know about, please drop us a bug report. The best method for doing this is to visit the WLAN Pi GitHub site and submit a bug report (note that this will require you to create a (free) GitHub account). If you visit the following page, you will be able to open a new issue: https://github.com/WLAN-Pi/wlanpi/issues If you hit the \"New Issue\" button, you will be presented with a form where you can enter the bug details. Please provide as much information as possible about: The image version being used (show on the WLAN Pi initial power-up home screen) How we can re-create the issue Any useful log files you may have been able to obtain (note that attachment files can be dragged in to the bug report form area) Any useful screen shots of pictures you have obtained to demonstrate the issue (note that attachment files can be dragged in to the bug report form area) Also, if possible, mark the issue as a bug using the label drop-down on the right of the web form. Once you have submitted the bug, an email alert will be generated to a team of people and it will be forwarded on to the relevant person by one of the team that picks it up. Please be patient when waiting for a response, as we are all volunteers doing this in our spare time.","title":"Bug Reports"},{"location":"get_involved_bugs/#getting-involved-bug-reporting","text":"If you're a WLAN Pi user and you think you spot a bug that we need to know about, please drop us a bug report. The best method for doing this is to visit the WLAN Pi GitHub site and submit a bug report (note that this will require you to create a (free) GitHub account). If you visit the following page, you will be able to open a new issue: https://github.com/WLAN-Pi/wlanpi/issues If you hit the \"New Issue\" button, you will be presented with a form where you can enter the bug details. Please provide as much information as possible about: The image version being used (show on the WLAN Pi initial power-up home screen) How we can re-create the issue Any useful log files you may have been able to obtain (note that attachment files can be dragged in to the bug report form area) Any useful screen shots of pictures you have obtained to demonstrate the issue (note that attachment files can be dragged in to the bug report form area) Also, if possible, mark the issue as a bug using the label drop-down on the right of the web form. Once you have submitted the bug, an email alert will be generated to a team of people and it will be forwarded on to the relevant person by one of the team that picks it up. Please be patient when waiting for a response, as we are all volunteers doing this in our spare time.","title":"Getting Involved - Bug Reporting"},{"location":"get_involved_coding/","text":"Getting Involved - Coding For the WLANPi If you have a project you'd like to develop for the WLAN Pi, or you'd like to improve some of our existing features, you may like to contribute some of your own code to the WLAN Pi initiative. The software running on the WLAN Pi tends to be from three different sources: Existing Linux open-source packages that we make available on the WLAN Pi Existing packages or Linux features that we configure and combine to provide a useful feature. These are usually glued together with bits of shell script or python to provide the required feature Software written from scratch by our team of volunteer developers. This tends to be software written in Python as so many people are currently keen to learn and hone their skills in this language, but we are not limited to just Python The range of skills among our developers varies widely. Many are learning, or are very keen to learn, to provide useful features for wireless network engineers through their coding efforts. We have beginners through to people who have bene looking at coding for several years. None of them (to my knowledge) are software developers as their main day job. The environment is very supportive of contributors of all skill levels. Development Workflow Our development workflow has evolved over the last year or so based on our experience of trying to develop for the WLAN Pi, together with input from a few members who have had some exposure to development processes. As we develop in a collaborative manner, we use GitHub for sharing code repositories and version control. It is worth spending some time getting up to speed with the basics of git and GitHub before jumping in to development efforts (there are plenty of tutorials on YouTube to help with this.) Having said this, many of us are still very new to git and the whole development process, so don't worry about being the only person who is struggling with understanding how this all fits together! :) In addition to GitHub, a large part of the development effort take place on a developer Slack community. This is where ideas, issues and suggestions are kicked around between contributors The development process has evolved as follows: An individual has a idea for a feature or software package they would like to build They may like to build some initial code and/or run the idea by other developers on the Slack community If the idea looks viable and is useful, a repository (repo) for the project is created by the originator of the idea. This is generally on the main WLAN Pi GitHub site, or may be on the originators own repo - either is fine as long as it is publicly available Development work is usually carried out on a 'dev' branch of the project repo. If others wish to contribute to the code, they may fork the repo and then submit a pull request to the dev branch of the project repo. The project repo owner can then review the code in the pull request before merging it in to the main project repo Once the code has reached a point where it is ready to be released as version to be used by others, it is merged in the master branch of the project repo by the repo owner. At this point, a release number is also assigned to the code within GitHub by assigning a release tag - this allows the code at a particular point in time to be retrieved if/when required. I found the following detailed guide on GitHub which details the process in much more detail and will probably answer most questions you have about the process : https://gist.github.com/Chaser324/ce0505fbed06b947d962 The fork and pull request steps that allows contribution by others may seem a little onerous and long-winded. But, this has been done to limit the number of people who have access to the main project repo for purposes of quality control and co-ordination of additions of software to each project. Conventions There are a few conventions that are well worth observing when developing or contributing code: Before starting work on any new features, code updates or new software modules, make sure that you touch base with the other developers on Slack. Our time as volunteers is very sparse, so we need to ensure we operate as efficiently as possible. There may already work under way to implement a similar feature or another module that has dependencies that need to be accounted for in the new code. Turning up with a new idea of fully functioning code may not be the best route to get an idea included in the next WLAN Pi image release - it may require work in other software modules to accommodate it or may even break existing code. Documentation: coding is the fun part of contributing for all of us. However, if you are the only person who knows how or why something works, then it may delay getting your code included. Each project should have a well written document to explain what the software does, how to install it, any dependencies and how to use it. Source code should be liberally sprinkled with embedded comments to explain how the software operates. If submitting a pull request, ensure that any existing documentation is also updated to include any new of changes to functionality that your code introduces (don't expect project owners to do your documentation) Version & release notes files: each project should have a file called 'version.txt' and a release_notes.txt file included in the root directory of the project. The 'version.txt' file should contain a version number that corresponds to the version release tag assigned in GitHub. Prior to release, alpha and beta designations may be used to indicate the code being reviewed is not yet a release version The 'release_notes.txt' file should contain a brief description of the new features, fixes or changes introduced in this release Special Notes For Development on Windows When developing using a dev environment on a Windows laptop, we have had a number of issues with end-of-line characters being incorrectly set due to the differences between line endings used in Linux & Windows systems. Windows uses a \"CRLF\" at the end of each line, but Linux uses a \"LF\", When uploading files to GitHub that use the Windows \"CRLF\" end-of-line, there can be unusual issues when the files are finally run on the WLAN Pi platform. The best way to avoid this issue is to add the following line to a \".gitattributes\" file in the root of each of your local repos (even cloned/forked repos) to ensure all line endings are \"LF\": * text eol=lf Some files need their execution bits set so that they are executable once downloaded to the WLAN Pi. Windows does not natively support the execution bit, so that it is not included when uploading files to GitHub. Please consult this article to ensure execute bits are set when developing on Windows: https://medium.com/@akash1233/change-file-permissions-when-working-with-git-repos-on-windows-ea22e34d5cee Final Thoughts We're all finding our way in this process of both developing and figuring out the best workflow for our requirements. The process is evolving over time, so please provide your input if there is a better way of doing things. Don't be too worried about diving out and figuring it al out - the main thing is to communicate with other folks so we can all move forwards together is a co-ordinated fashion. It's not easy at times as many of us are newbies, but we're a friendly bunch who are keen to push things forwards. (Newbie note: One thing I found very useful was to work with a more fully featured development environment, as opposed to the text editors I started out with. I do not have extensive experience of different dev environments, but the Visual Studio Code environment has been very useful for me...you might like to try it out too - it's free!) Links WLAN Pi GitHub site Git Visual Studio Code","title":"Coding for the WLAN Pi"},{"location":"get_involved_coding/#getting-involved-coding-for-the-wlanpi","text":"If you have a project you'd like to develop for the WLAN Pi, or you'd like to improve some of our existing features, you may like to contribute some of your own code to the WLAN Pi initiative. The software running on the WLAN Pi tends to be from three different sources: Existing Linux open-source packages that we make available on the WLAN Pi Existing packages or Linux features that we configure and combine to provide a useful feature. These are usually glued together with bits of shell script or python to provide the required feature Software written from scratch by our team of volunteer developers. This tends to be software written in Python as so many people are currently keen to learn and hone their skills in this language, but we are not limited to just Python The range of skills among our developers varies widely. Many are learning, or are very keen to learn, to provide useful features for wireless network engineers through their coding efforts. We have beginners through to people who have bene looking at coding for several years. None of them (to my knowledge) are software developers as their main day job. The environment is very supportive of contributors of all skill levels.","title":"Getting Involved - Coding For the WLANPi"},{"location":"get_involved_coding/#development-workflow","text":"Our development workflow has evolved over the last year or so based on our experience of trying to develop for the WLAN Pi, together with input from a few members who have had some exposure to development processes. As we develop in a collaborative manner, we use GitHub for sharing code repositories and version control. It is worth spending some time getting up to speed with the basics of git and GitHub before jumping in to development efforts (there are plenty of tutorials on YouTube to help with this.) Having said this, many of us are still very new to git and the whole development process, so don't worry about being the only person who is struggling with understanding how this all fits together! :) In addition to GitHub, a large part of the development effort take place on a developer Slack community. This is where ideas, issues and suggestions are kicked around between contributors The development process has evolved as follows: An individual has a idea for a feature or software package they would like to build They may like to build some initial code and/or run the idea by other developers on the Slack community If the idea looks viable and is useful, a repository (repo) for the project is created by the originator of the idea. This is generally on the main WLAN Pi GitHub site, or may be on the originators own repo - either is fine as long as it is publicly available Development work is usually carried out on a 'dev' branch of the project repo. If others wish to contribute to the code, they may fork the repo and then submit a pull request to the dev branch of the project repo. The project repo owner can then review the code in the pull request before merging it in to the main project repo Once the code has reached a point where it is ready to be released as version to be used by others, it is merged in the master branch of the project repo by the repo owner. At this point, a release number is also assigned to the code within GitHub by assigning a release tag - this allows the code at a particular point in time to be retrieved if/when required. I found the following detailed guide on GitHub which details the process in much more detail and will probably answer most questions you have about the process : https://gist.github.com/Chaser324/ce0505fbed06b947d962 The fork and pull request steps that allows contribution by others may seem a little onerous and long-winded. But, this has been done to limit the number of people who have access to the main project repo for purposes of quality control and co-ordination of additions of software to each project.","title":"Development Workflow"},{"location":"get_involved_coding/#conventions","text":"There are a few conventions that are well worth observing when developing or contributing code: Before starting work on any new features, code updates or new software modules, make sure that you touch base with the other developers on Slack. Our time as volunteers is very sparse, so we need to ensure we operate as efficiently as possible. There may already work under way to implement a similar feature or another module that has dependencies that need to be accounted for in the new code. Turning up with a new idea of fully functioning code may not be the best route to get an idea included in the next WLAN Pi image release - it may require work in other software modules to accommodate it or may even break existing code. Documentation: coding is the fun part of contributing for all of us. However, if you are the only person who knows how or why something works, then it may delay getting your code included. Each project should have a well written document to explain what the software does, how to install it, any dependencies and how to use it. Source code should be liberally sprinkled with embedded comments to explain how the software operates. If submitting a pull request, ensure that any existing documentation is also updated to include any new of changes to functionality that your code introduces (don't expect project owners to do your documentation) Version & release notes files: each project should have a file called 'version.txt' and a release_notes.txt file included in the root directory of the project. The 'version.txt' file should contain a version number that corresponds to the version release tag assigned in GitHub. Prior to release, alpha and beta designations may be used to indicate the code being reviewed is not yet a release version The 'release_notes.txt' file should contain a brief description of the new features, fixes or changes introduced in this release","title":"Conventions"},{"location":"get_involved_coding/#special-notes-for-development-on-windows","text":"When developing using a dev environment on a Windows laptop, we have had a number of issues with end-of-line characters being incorrectly set due to the differences between line endings used in Linux & Windows systems. Windows uses a \"CRLF\" at the end of each line, but Linux uses a \"LF\", When uploading files to GitHub that use the Windows \"CRLF\" end-of-line, there can be unusual issues when the files are finally run on the WLAN Pi platform. The best way to avoid this issue is to add the following line to a \".gitattributes\" file in the root of each of your local repos (even cloned/forked repos) to ensure all line endings are \"LF\": * text eol=lf Some files need their execution bits set so that they are executable once downloaded to the WLAN Pi. Windows does not natively support the execution bit, so that it is not included when uploading files to GitHub. Please consult this article to ensure execute bits are set when developing on Windows: https://medium.com/@akash1233/change-file-permissions-when-working-with-git-repos-on-windows-ea22e34d5cee","title":"Special Notes For Development on Windows"},{"location":"get_involved_coding/#final-thoughts","text":"We're all finding our way in this process of both developing and figuring out the best workflow for our requirements. The process is evolving over time, so please provide your input if there is a better way of doing things. Don't be too worried about diving out and figuring it al out - the main thing is to communicate with other folks so we can all move forwards together is a co-ordinated fashion. It's not easy at times as many of us are newbies, but we're a friendly bunch who are keen to push things forwards. (Newbie note: One thing I found very useful was to work with a more fully featured development environment, as opposed to the text editors I started out with. I do not have extensive experience of different dev environments, but the Visual Studio Code environment has been very useful for me...you might like to try it out too - it's free!)","title":"Final Thoughts"},{"location":"get_involved_coding/#links","text":"WLAN Pi GitHub site Git Visual Studio Code","title":"Links"},{"location":"get_involved_non_coding/","text":"Getting Involved - I'm Not a Coder! The WLANPi project is a community effort and we welcome volunteers to contribute to our efforts. Most folks who join the project are interested in the \"cool\" coding part of the project. But, the truth is that without rigorous testing and good quality documentation, the quality of the delivered project is likely to be compromised. Even if you are not a coder, but would still like to be involved with the project, we need people like you to test code and ensure that documentation is up to scratch. Every time that code is updated, things will break - carefully testing the code is a critical activity before we release it out to the user base. Each time we release a new image version, we catch many unexpected bugs due to beta testing. This requires significant effort and we really need more help with writing test plans and executing test suites. Once we have new code ready to go, we also need to make sure it is sufficiently documented so that our user base are able to use it. Again, coding is the \"sexy\" part of the project that many tend to focus on. But, if people don't know how to use the code, the developers have wasted their time. We need people to help to create, edit and maintain the documentation that ensures users can use the full suite of WLAN Pi features. If you'd like to be involved in any of these areas, please contact Jerry Olla or Nigel Bowden on Twitter or track them down via any well known search engine.","title":"Non-coder Contribution Opportunties"},{"location":"get_involved_non_coding/#getting-involved-im-not-a-coder","text":"The WLANPi project is a community effort and we welcome volunteers to contribute to our efforts. Most folks who join the project are interested in the \"cool\" coding part of the project. But, the truth is that without rigorous testing and good quality documentation, the quality of the delivered project is likely to be compromised. Even if you are not a coder, but would still like to be involved with the project, we need people like you to test code and ensure that documentation is up to scratch. Every time that code is updated, things will break - carefully testing the code is a critical activity before we release it out to the user base. Each time we release a new image version, we catch many unexpected bugs due to beta testing. This requires significant effort and we really need more help with writing test plans and executing test suites. Once we have new code ready to go, we also need to make sure it is sufficiently documented so that our user base are able to use it. Again, coding is the \"sexy\" part of the project that many tend to focus on. But, if people don't know how to use the code, the developers have wasted their time. We need people to help to create, edit and maintain the documentation that ensures users can use the full suite of WLAN Pi features. If you'd like to be involved in any of these areas, please contact Jerry Olla or Nigel Bowden on Twitter or track them down via any well known search engine.","title":"Getting Involved - I'm Not a Coder!"},{"location":"get_involved_requests/","text":"Getting Involved - Feature Requests Once you've been using the WLAN Pi for a while, you'll probably start to think: \"wouldn't it be great if the WLAN Pi could do xyz?\" , or: \"wouldn't it be great if package x were available on the WLAN Pi?\" If you have any suggestions that you think are worthy of consideration, then please open a feature request on GitHub. It will be considered for addition to our roadmap. If you're have some coding skills, it may even be worth offering to code it yourself and maybe pull together some proof of concept code. If you submit a suggestion, please remember that we are a group of volunteers doing this work in our spare time, so it may take some time for us to get back to you. To submit a feature request/suggestion, submit a request via the GitHub issues feature (note that this will require you to create a (free) GitHub account). If you visit the following page, you will be able to open a new request: https://github.com/WLAN-Pi/wlanpi/issues If you hit the \"New Issue\" button, you will be presented with a form where you can enter the feature request details. Please provide as much information as possible about your idea/request. Links to web sites of existing linux or similar packages (if applicable), screen shots and sample code will all help if available. Also, if possible, mark the request as a enhancement using the label drop-down on the right of the web form. Once you have submitted the request, an email alert will be generated to a team of people and it will be forwarded on to the relevant person by one of the team that picks it up. Please be patient when waiting for a response, as we are all volunteers doing this in our spare time.","title":"Feature Suggestions"},{"location":"get_involved_requests/#getting-involved-feature-requests","text":"Once you've been using the WLAN Pi for a while, you'll probably start to think: \"wouldn't it be great if the WLAN Pi could do xyz?\" , or: \"wouldn't it be great if package x were available on the WLAN Pi?\" If you have any suggestions that you think are worthy of consideration, then please open a feature request on GitHub. It will be considered for addition to our roadmap. If you're have some coding skills, it may even be worth offering to code it yourself and maybe pull together some proof of concept code. If you submit a suggestion, please remember that we are a group of volunteers doing this work in our spare time, so it may take some time for us to get back to you. To submit a feature request/suggestion, submit a request via the GitHub issues feature (note that this will require you to create a (free) GitHub account). If you visit the following page, you will be able to open a new request: https://github.com/WLAN-Pi/wlanpi/issues If you hit the \"New Issue\" button, you will be presented with a form where you can enter the feature request details. Please provide as much information as possible about your idea/request. Links to web sites of existing linux or similar packages (if applicable), screen shots and sample code will all help if available. Also, if possible, mark the request as a enhancement using the label drop-down on the right of the web form. Once you have submitted the request, an email alert will be generated to a team of people and it will be forwarded on to the relevant person by one of the team that picks it up. Please be patient when waiting for a response, as we are all volunteers doing this in our spare time.","title":"Getting Involved - Feature Requests"},{"location":"getting_started_build_your_own/","text":"Getting Started with the WLAN Pi Building Your Own Kit Rolling your own WLAN Pi takes a little more work than a pre-built kit, but with a little effort, you can source all of the parts and put one together. Here is a list of the items you are going to need to source to build your own WLAN Pi: A NanoPi NEO2 from the FriendlyArm company (located in China): this is the WLAN Pi hardware platform itself (Note that this comes with a micro-SD card, so you do not need to purchase a separate card unless you want a spare ) A Comfast CF-912 USB wireless adapter: this is the currently recommended adapter to support the various wireless operations that the WLAN Pi supports (you can usually get these fom eBay or Amazon ) An micro-SD to USB adapter module to allow images to be burned on to the WLAN Pi (easily sourced fom Amazon ) A USB to micro-USB cable to power and/or provide connectivity to the WLAN Pi (the flavour of USB cable will depend on your requirements) Optional extra items: A power supply . The Raspberry Pi PSUs work fine with the WLAN Pi and are readily available from Amazon (Note that you can also use your USB to micro USB cable with a phone charger PSU in many cases if you'd prefer not to buy a dedicated PSU) POE Splitter . If you'd like to power your WLAN Pi from a switch POE port, a splitter is just what you need. However, ensure that you buy a splitter that supports Gigabit-Ethernet , as many low-cost POE splitters are only 100mbps Ethernet (which is not great when you are using the WLAN Pi for speedtests or iperf). Lithium battery (in case you want to leave the WLAN Pi powered on for a few hours somewhere) Extra micro-SD card (in case you'd like a spare for different image versions or customizations) Custom Handheld Case : Designed specifically for use with the WLAN Pi, houses the Wi-Fi adapter and USB-C cable, while still exposing the USB port and ethernet port on the bottom, while still allowing access to the MicroSD slot - a great additon to make the WLAN Pi in to a true hand-held tester! (Created by Joel Crane @Potato_Fi More info: http://www.potatofi.com/2019/10/the-wlan-pi-handheld-case.html (Note: some the the links on this page are Amazon affiliate links)","title":"Build Your Own"},{"location":"getting_started_build_your_own/#getting-started-with-the-wlan-pi","text":"","title":"Getting Started with the WLAN Pi"},{"location":"getting_started_build_your_own/#building-your-own-kit","text":"Rolling your own WLAN Pi takes a little more work than a pre-built kit, but with a little effort, you can source all of the parts and put one together. Here is a list of the items you are going to need to source to build your own WLAN Pi: A NanoPi NEO2 from the FriendlyArm company (located in China): this is the WLAN Pi hardware platform itself (Note that this comes with a micro-SD card, so you do not need to purchase a separate card unless you want a spare ) A Comfast CF-912 USB wireless adapter: this is the currently recommended adapter to support the various wireless operations that the WLAN Pi supports (you can usually get these fom eBay or Amazon ) An micro-SD to USB adapter module to allow images to be burned on to the WLAN Pi (easily sourced fom Amazon ) A USB to micro-USB cable to power and/or provide connectivity to the WLAN Pi (the flavour of USB cable will depend on your requirements) Optional extra items: A power supply . The Raspberry Pi PSUs work fine with the WLAN Pi and are readily available from Amazon (Note that you can also use your USB to micro USB cable with a phone charger PSU in many cases if you'd prefer not to buy a dedicated PSU) POE Splitter . If you'd like to power your WLAN Pi from a switch POE port, a splitter is just what you need. However, ensure that you buy a splitter that supports Gigabit-Ethernet , as many low-cost POE splitters are only 100mbps Ethernet (which is not great when you are using the WLAN Pi for speedtests or iperf). Lithium battery (in case you want to leave the WLAN Pi powered on for a few hours somewhere) Extra micro-SD card (in case you'd like a spare for different image versions or customizations) Custom Handheld Case : Designed specifically for use with the WLAN Pi, houses the Wi-Fi adapter and USB-C cable, while still exposing the USB port and ethernet port on the bottom, while still allowing access to the MicroSD slot - a great additon to make the WLAN Pi in to a true hand-held tester! (Created by Joel Crane @Potato_Fi More info: http://www.potatofi.com/2019/10/the-wlan-pi-handheld-case.html (Note: some the the links on this page are Amazon affiliate links)","title":"Building Your Own Kit"},{"location":"getting_started_buy_kit/","text":"Getting Started with the WLAN Pi Buying a Kit If you'd like to buy a pre-built kit, check out our suppliers page . We'll keep this updated with kit buying options. One of the easiest options is to buy the kit from the WLPC store . You get the advantage of having all the components you need in one order, and the kit comes pre-assembled with a software image burned and ready to go. You also have a reputable, single source to contact if there are any issues with your purchase. ( However, if you're a nuts & bolts type of person who like to roll up your sleeves and build stuff yourself, check out our \"build your own kit page\" )","title":"Buy a Kit"},{"location":"getting_started_buy_kit/#getting-started-with-the-wlan-pi","text":"","title":"Getting Started with the WLAN Pi"},{"location":"getting_started_buy_kit/#buying-a-kit","text":"If you'd like to buy a pre-built kit, check out our suppliers page . We'll keep this updated with kit buying options. One of the easiest options is to buy the kit from the WLPC store . You get the advantage of having all the components you need in one order, and the kit comes pre-assembled with a software image burned and ready to go. You also have a reputable, single source to contact if there are any issues with your purchase. ( However, if you're a nuts & bolts type of person who like to roll up your sleeves and build stuff yourself, check out our \"build your own kit page\" )","title":"Buying a Kit"},{"location":"getting_started_overview/","text":"Getting Started with the WLAN Pi User Guide If you have your WLAN Pi hardware and you'd like to find out what you can do with your WLAN Pi, you can check out this user guide . This guide is a couple of years old now, but has some great information providing you with more background to the WLAN Pi and will get you going with some of its great utilities. Info User Guide Hardware To get started with the WLAN Pi, you're going to need to get hold of some WLAN Pi hardware. The items you'll need are all generally low cost and relatively easy to source. There are a few options available to get yourself set up with a WLAN Pi: Attend a WLPC conference and complete one of the WLAN Pi deep dive sessions Buy a complete kit from the WLPC online store Source the individual items you'll need yourself from various suppliers. Obviously, buying the kit from the WLPC store is a quick and easy option. You get the advantage of having all the components you need in one order, and the kit comes pre-assembled with a software image burned and ready to go. You also have a reputable, single source to contact if there are any issues with your purchase. However, if you're a nuts & bolts type of person who likes to roll up your sleeves and build stuff yourself, you can source the various component parts yourself and build from scratch . (This will likely take you quite a lot longer to do compared to buying the kit, but arguably may be more fun and slightly cheaper). Check out the links below for more information: Buying a Kit Build Your Own From Scratch Note Looking for supported wireless adapter types? Check here","title":"Overview"},{"location":"getting_started_overview/#getting-started-with-the-wlan-pi","text":"","title":"Getting Started with the WLAN Pi"},{"location":"getting_started_overview/#user-guide","text":"If you have your WLAN Pi hardware and you'd like to find out what you can do with your WLAN Pi, you can check out this user guide . This guide is a couple of years old now, but has some great information providing you with more background to the WLAN Pi and will get you going with some of its great utilities. Info User Guide","title":"User Guide"},{"location":"getting_started_overview/#hardware","text":"To get started with the WLAN Pi, you're going to need to get hold of some WLAN Pi hardware. The items you'll need are all generally low cost and relatively easy to source. There are a few options available to get yourself set up with a WLAN Pi: Attend a WLPC conference and complete one of the WLAN Pi deep dive sessions Buy a complete kit from the WLPC online store Source the individual items you'll need yourself from various suppliers. Obviously, buying the kit from the WLPC store is a quick and easy option. You get the advantage of having all the components you need in one order, and the kit comes pre-assembled with a software image burned and ready to go. You also have a reputable, single source to contact if there are any issues with your purchase. However, if you're a nuts & bolts type of person who likes to roll up your sleeves and build stuff yourself, you can source the various component parts yourself and build from scratch . (This will likely take you quite a lot longer to do compared to buying the kit, but arguably may be more fun and slightly cheaper). Check out the links below for more information: Buying a Kit Build Your Own From Scratch Note Looking for supported wireless adapter types? Check here","title":"Hardware"},{"location":"news/","text":"News Availability of the NEO2 Device 10th May 2020 It appears that the company who produce the NEO2 device, which is the platform on which the WAN Pi is currently built, may not be able to continue its production due to component availability issues. We understand that they are hoping to have prototypes of a replacement device during May 2020, but it looks like the NEO2 is no more. We will be assessing the new device when it becomes available, as well as looking at possible alternatives for the WLAN Pi project hardware going forwards. There are still quite a few ready-built WLAN Pi's available from the WLAN Pros Store and BadgerFi in the UK. We'll still be developing for the existing platform going forwards, so the existing NEO2 platform still has very significant mileage left going forwards. The current form factor, performance and power consumption make it a very difficult act to follow, so you might like to consider getting your NEO2-based WLAN Pi while stocks last. More details to follow as we get more information....stay tuned. How to check client DFS channel support 14th February 2020 Useful video from Whyf16uy about how to use the WLAN Pi profiler to identify if a client supports DFS channels: link Image version 1.9.1 [WLPC edition] Released 13th February 2020 The new WLANPi image for WLPC Phoenix has been released, get it here : link ZeroTier and WLAN Pi - Keeping profiles & keys for re-imaging Nice blog post from Rick Steiner about using ZeriTier on the WLAN Pi and how you can preserve your ZeroTier config next time you re-image : link How to burn a new image on your WLAN Pi (Video) 19th January 2020 Video on Youtube . WLAN Pi Image v1.9.0 released 2nd January 2019 Image version 1.9.0 is available for download at : v1.9.0 Remote access to a device behind NAT/Firewall 24th November 2019 Article by Daniel Finimundi: article WLANPi 1.8.4 beta released 14th November 2019 Version 1.8.49(beta) is avaiable or download at : v.1.8.4 WLANPI as a SYSLOG Server ? (Blog article) 14th November 2019 Nice blog article from Haydn Andrews about using a WLANPi as a field-based syslog server for troubleshooting: link Using the WLAN Pi's USB host interface in Windows 10 31st October 2019 In this blog article , Patrick Langendoen discusses how to fix an issue on Windows machines with detecting the USB connection to a WLANPi as a serial port, rather than the expected USB Ethernet /RNDIS interfaces: link","title":"News"},{"location":"news/#news","text":"","title":"News"},{"location":"news/#availability-of-the-neo2-device","text":"10th May 2020 It appears that the company who produce the NEO2 device, which is the platform on which the WAN Pi is currently built, may not be able to continue its production due to component availability issues. We understand that they are hoping to have prototypes of a replacement device during May 2020, but it looks like the NEO2 is no more. We will be assessing the new device when it becomes available, as well as looking at possible alternatives for the WLAN Pi project hardware going forwards. There are still quite a few ready-built WLAN Pi's available from the WLAN Pros Store and BadgerFi in the UK. We'll still be developing for the existing platform going forwards, so the existing NEO2 platform still has very significant mileage left going forwards. The current form factor, performance and power consumption make it a very difficult act to follow, so you might like to consider getting your NEO2-based WLAN Pi while stocks last. More details to follow as we get more information....stay tuned.","title":"Availability of the NEO2 Device"},{"location":"news/#how-to-check-client-dfs-channel-support","text":"14th February 2020 Useful video from Whyf16uy about how to use the WLAN Pi profiler to identify if a client supports DFS channels: link","title":"How to check client DFS channel support"},{"location":"news/#image-version-191-wlpc-edition-released","text":"13th February 2020 The new WLANPi image for WLPC Phoenix has been released, get it here : link","title":"Image version 1.9.1 [WLPC edition] Released"},{"location":"news/#zerotier-and-wlan-pi-keeping-profiles-keys-for-re-imaging","text":"Nice blog post from Rick Steiner about using ZeriTier on the WLAN Pi and how you can preserve your ZeroTier config next time you re-image : link","title":"ZeroTier and WLAN Pi - Keeping profiles &amp; keys for re-imaging"},{"location":"news/#how-to-burn-a-new-image-on-your-wlan-pi-video","text":"19th January 2020 Video on Youtube .","title":"How to burn a new image on your WLAN Pi (Video)"},{"location":"news/#wlan-pi-image-v190-released","text":"2nd January 2019 Image version 1.9.0 is available for download at : v1.9.0","title":"WLAN Pi Image v1.9.0 released"},{"location":"news/#remote-access-to-a-device-behind-natfirewall","text":"24th November 2019 Article by Daniel Finimundi: article","title":"Remote access to a device behind NAT/Firewall"},{"location":"news/#wlanpi-184-beta-released","text":"14th November 2019 Version 1.8.49(beta) is avaiable or download at : v.1.8.4","title":"WLANPi 1.8.4 beta released"},{"location":"news/#wlanpi-as-a-syslog-server-blog-article","text":"14th November 2019 Nice blog article from Haydn Andrews about using a WLANPi as a field-based syslog server for troubleshooting: link","title":"WLANPI as a SYSLOG Server ? (Blog article)"},{"location":"news/#using-the-wlan-pis-usb-host-interface-in-windows-10","text":"31st October 2019 In this blog article , Patrick Langendoen discusses how to fix an issue on Windows machines with detecting the USB connection to a WLANPi as a serial port, rather than the expected USB Ethernet /RNDIS interfaces: link","title":"Using the WLAN Pi's USB host interface in Windows 10"},{"location":"packages/","text":"Packages The WLANPi image is supplied with a number of useful networking programs, utilities and scripts to help the WLAN professional out in the field. An overview of each of these packages is provided in this section. Perf Measurement HTML Speedtest iPerf Ruckus Zap Ookla Speedtest Analysis Kismet Horst Scapy Tcpdump Termshark extcap Uilities Wi-Fi Console Hotspot Mode Wiperf Profiler","title":"Overview"},{"location":"packages/#packages","text":"The WLANPi image is supplied with a number of useful networking programs, utilities and scripts to help the WLAN professional out in the field. An overview of each of these packages is provided in this section. Perf Measurement HTML Speedtest iPerf Ruckus Zap Ookla Speedtest Analysis Kismet Horst Scapy Tcpdump Termshark extcap Uilities Wi-Fi Console Hotspot Mode Wiperf Profiler","title":"Packages"},{"location":"pkg_analysis_extcap/","text":"extcap The extcap project was originally created by Adrian Granados. The utility is a wrapper around the SSHDump feature provided in Wireshark 3.x. Extcap feature is not actually a package on the WLAN Pi, but is an external utility that allows the WLAN Pi to be used as a remote capture device using Wireshark. It needs to be installed on the laptop where Wireshark is installed. It also provides additional options within Wireshark to allow the configuration of the WLAN Pi device to start a remote wireless frame capture. A Windows version of the extcap project was created by Nigel Bowden, providing a Windows-native version of the utility. The video below shows how to use the extcap feature in Wireshark, using the WLAN Pi as a capture source. Checkout these useful links for more information about extcap: Wireshark Plugin To Capture Wireless Frames Using a WLANPi (Windows 10) Githib: Wireshark extcap interface for remote wireless captures Github: Wxtcap for Windows","title":"extcap"},{"location":"pkg_analysis_extcap/#extcap","text":"The extcap project was originally created by Adrian Granados. The utility is a wrapper around the SSHDump feature provided in Wireshark 3.x. Extcap feature is not actually a package on the WLAN Pi, but is an external utility that allows the WLAN Pi to be used as a remote capture device using Wireshark. It needs to be installed on the laptop where Wireshark is installed. It also provides additional options within Wireshark to allow the configuration of the WLAN Pi device to start a remote wireless frame capture. A Windows version of the extcap project was created by Nigel Bowden, providing a Windows-native version of the utility. The video below shows how to use the extcap feature in Wireshark, using the WLAN Pi as a capture source. Checkout these useful links for more information about extcap: Wireshark Plugin To Capture Wireless Frames Using a WLANPi (Windows 10) Githib: Wireshark extcap interface for remote wireless captures Github: Wxtcap for Windows","title":"extcap"},{"location":"pkg_analysis_horst/","text":"Horst horst is a small, lightweight IEEE802.11 WLAN analyzer with a text interface. It's a Linux program and can be used on any wireless LAN interface which supports monitor mode. Its basic function is similar to tcpdump, Wireshark or Kismet, but it's much smaller and shows different, aggregated information which is not easily available from other tools. It is made for debugging wireless LANs with a focus on getting a quick overview instead of deep packet inspection and has special features for Ad-hoc (IBSS) mode and mesh networks. It can be useful to get a quick overview of what's going on all wireless LAN channels and to identify problems. It includes the following features: Shows signal (RSSI) values per station, something hard to get, especially in IBSS mode Calculates channel utilization (\u201cusage\u201d) by adding up the amount of time the packets actually occupy the medium \u201cSpectrum Analyzer\u201d shows signal levels and usage per channel Graphical packet history, with signal, packet type and physical rate Shows all stations per ESSID and the live TSF per node as it is counting Detects IBSS \u201csplits\u201d (same ESSID but different BSSID \u2013 this is/was a common driver problem on IBSS mode) Statistics of packets/bytes per physical rate and per packet type Has some support for mesh protocols (OLSR and batman) Can filter specific packet types, operating modes, source addresses or BSSIDs Client/server support for monitoring on remote nodes Automatically adds and removes monitor interface Usage horst needs sudo permissions to run, and has a few command line switches, the most notable one to use is \u2013C which allows you to set the channel used, see the man page for a complete listing. To launch horst, SSH to your WLAN Pi and issue the following command to launch the terminal UI: sudo horst # to launch against an interface other than wlan0: sudo horst -i wlan1 To view all horst options, take a look the manual pages for the software using the following CLI command in your SSH session (hit 'q' to quit the man pages): man horst After launching the program, pay attention to the bottom left of the program which will allow you to access the different menu options: Press C to access the channel menu and changes: Horst will also display some stats as to what type and how many types of a frame it is receiving: Lastly horst is a poor man\u2019s spectrum analyzer, which will allow you to see some basic info regarding the channel: horst is another application that hasn\u2019t been updated in some time and may have some bugs or may not work with the latest hardware. More info can be found in the man page or at https://github.com/br101/horst (Contributed by Ian Stout)","title":"Horst"},{"location":"pkg_analysis_horst/#horst","text":"horst is a small, lightweight IEEE802.11 WLAN analyzer with a text interface. It's a Linux program and can be used on any wireless LAN interface which supports monitor mode. Its basic function is similar to tcpdump, Wireshark or Kismet, but it's much smaller and shows different, aggregated information which is not easily available from other tools. It is made for debugging wireless LANs with a focus on getting a quick overview instead of deep packet inspection and has special features for Ad-hoc (IBSS) mode and mesh networks. It can be useful to get a quick overview of what's going on all wireless LAN channels and to identify problems. It includes the following features: Shows signal (RSSI) values per station, something hard to get, especially in IBSS mode Calculates channel utilization (\u201cusage\u201d) by adding up the amount of time the packets actually occupy the medium \u201cSpectrum Analyzer\u201d shows signal levels and usage per channel Graphical packet history, with signal, packet type and physical rate Shows all stations per ESSID and the live TSF per node as it is counting Detects IBSS \u201csplits\u201d (same ESSID but different BSSID \u2013 this is/was a common driver problem on IBSS mode) Statistics of packets/bytes per physical rate and per packet type Has some support for mesh protocols (OLSR and batman) Can filter specific packet types, operating modes, source addresses or BSSIDs Client/server support for monitoring on remote nodes Automatically adds and removes monitor interface","title":"Horst"},{"location":"pkg_analysis_horst/#usage","text":"horst needs sudo permissions to run, and has a few command line switches, the most notable one to use is \u2013C which allows you to set the channel used, see the man page for a complete listing. To launch horst, SSH to your WLAN Pi and issue the following command to launch the terminal UI: sudo horst # to launch against an interface other than wlan0: sudo horst -i wlan1 To view all horst options, take a look the manual pages for the software using the following CLI command in your SSH session (hit 'q' to quit the man pages): man horst After launching the program, pay attention to the bottom left of the program which will allow you to access the different menu options: Press C to access the channel menu and changes: Horst will also display some stats as to what type and how many types of a frame it is receiving: Lastly horst is a poor man\u2019s spectrum analyzer, which will allow you to see some basic info regarding the channel: horst is another application that hasn\u2019t been updated in some time and may have some bugs or may not work with the latest hardware. More info can be found in the man page or at https://github.com/br101/horst (Contributed by Ian Stout)","title":"Usage"},{"location":"pkg_analysis_kismet/","text":"Kismet TBA","title":"Kismet"},{"location":"pkg_analysis_kismet/#kismet","text":"TBA","title":"Kismet"},{"location":"pkg_analysis_scapy/","text":"Scapy TBA","title":"Scapy"},{"location":"pkg_analysis_scapy/#scapy","text":"TBA","title":"Scapy"},{"location":"pkg_analysis_termshark/","text":"Termshark Termshark is a terminal based UI that provides a Wireshark-type experience from the CLI. It provides many of the features of Wireshark, but delivered locally on the WLAN Pi via a text-based UI. To get to know more about Termshark, visit the official web site . To try Termshark out on the WLAN Pi, SSH to your WLAN Pi (make sure your terminal emulation is setup to use ANSI mode and enable colours) and enter the following command: sudo termshark -i wlan0 Note make sure you have a WLAN adapter that supports monitor mode plugged in) After a few seconds, you should see some activity on the UI and frames being decoded. To access the filter bar area, hit the '/' key and left/right arrows to make selections. To exit, hit the 'esc' key and use arrow keys to select 'Misc' and hit 'q' to quit. You can find out more about using the application in the official user guide","title":"Termshark"},{"location":"pkg_analysis_termshark/#termshark","text":"Termshark is a terminal based UI that provides a Wireshark-type experience from the CLI. It provides many of the features of Wireshark, but delivered locally on the WLAN Pi via a text-based UI. To get to know more about Termshark, visit the official web site . To try Termshark out on the WLAN Pi, SSH to your WLAN Pi (make sure your terminal emulation is setup to use ANSI mode and enable colours) and enter the following command: sudo termshark -i wlan0 Note make sure you have a WLAN adapter that supports monitor mode plugged in) After a few seconds, you should see some activity on the UI and frames being decoded. To access the filter bar area, hit the '/' key and left/right arrows to make selections. To exit, hit the 'esc' key and use arrow keys to select 'Misc' and hit 'q' to quit. You can find out more about using the application in the official user guide","title":"Termshark"},{"location":"pkg_perf_iperf/","text":"iperf iperf is a tool for performing network throughput measurements. It can test either TCP or UDP throughput. To perform an iperf test the user must establish both a server (to receive traffic) and a client (to generate traffic). The WLAN Pi has iperf2 and iperf3 servers running upon start-up, these servers are using the default options for each version. For reference, iperf uses the following ports: iperf2 - 5001 iperf3 - 5201 Iperf3 is a rewrite of iperf from scratch to create a smaller, simpler code base. Iperf3 is not backwards compatible with iperf2. Usage To view all iperf options, take a look the manual pages for the software using the following CLI command in your SSH session (hit 'q' to quit the man pages) or use the -h or --help flag for listing of the commands: man iperf iperf -h man iperf3 iperf3 -h Examples Basic throughput test (Note that by default, iperf tests using TCP. To use UDP, see later examples.) iperf -c <server_ip> iperf3 -c <server_ip> Displaying data formatted in different units. The units that in which results are displayed (i.e. Kilobits per sec, Megabits per sec etc.) may be modified using the following command attributes: iperf -c <server_ip> -f (b, B, k, K, m, M, g, G, t, T) iperf3 -c <server_ip> -f (b, B, k, K, m, M, g, G, t, T) iperf from server to client (reverse direction test) or bi-directional test iperf -c <server_ip> -r -d iperf3 -c <server_ip> -R or iperf3 -c <server_ip> --bidir iperf using udp iperf -c <server_ip> -u iperf3 -c <server_ip> -u References The following references may be useful for further information about iperf: iperf home page iPerf2 vs iPerf3 | Panos Vouzis | WLPC Phoenix 2020 It's not the Network | Panos Vouzis | WLPC Phoenix 2018 (Contributed by Ian Stout)","title":"iPerf"},{"location":"pkg_perf_iperf/#iperf","text":"iperf is a tool for performing network throughput measurements. It can test either TCP or UDP throughput. To perform an iperf test the user must establish both a server (to receive traffic) and a client (to generate traffic). The WLAN Pi has iperf2 and iperf3 servers running upon start-up, these servers are using the default options for each version. For reference, iperf uses the following ports: iperf2 - 5001 iperf3 - 5201 Iperf3 is a rewrite of iperf from scratch to create a smaller, simpler code base. Iperf3 is not backwards compatible with iperf2.","title":"iperf"},{"location":"pkg_perf_iperf/#usage","text":"To view all iperf options, take a look the manual pages for the software using the following CLI command in your SSH session (hit 'q' to quit the man pages) or use the -h or --help flag for listing of the commands: man iperf iperf -h man iperf3 iperf3 -h","title":"Usage"},{"location":"pkg_perf_iperf/#examples","text":"","title":"Examples"},{"location":"pkg_perf_iperf/#basic-throughput-test","text":"(Note that by default, iperf tests using TCP. To use UDP, see later examples.) iperf -c <server_ip> iperf3 -c <server_ip>","title":"Basic throughput test"},{"location":"pkg_perf_iperf/#displaying-data-formatted-in-different-units","text":"The units that in which results are displayed (i.e. Kilobits per sec, Megabits per sec etc.) may be modified using the following command attributes: iperf -c <server_ip> -f (b, B, k, K, m, M, g, G, t, T) iperf3 -c <server_ip> -f (b, B, k, K, m, M, g, G, t, T)","title":"Displaying data formatted in different units."},{"location":"pkg_perf_iperf/#iperf-from-server-to-client-reverse-direction-test-or-bi-directional-test","text":"iperf -c <server_ip> -r -d iperf3 -c <server_ip> -R or iperf3 -c <server_ip> --bidir","title":"iperf from server to client (reverse direction test) or bi-directional test"},{"location":"pkg_perf_iperf/#iperf-using-udp","text":"iperf -c <server_ip> -u iperf3 -c <server_ip> -u","title":"iperf using udp"},{"location":"pkg_perf_iperf/#references","text":"The following references may be useful for further information about iperf: iperf home page iPerf2 vs iPerf3 | Panos Vouzis | WLPC Phoenix 2020 It's not the Network | Panos Vouzis | WLPC Phoenix 2018 (Contributed by Ian Stout)","title":"References"},{"location":"pkg_perf_speedtest/","text":"Speedtest TBA","title":"HTML Speedtest"},{"location":"pkg_perf_speedtest/#speedtest","text":"TBA","title":"Speedtest"},{"location":"pkg_perf_zap/","text":"Zap Zap is a 3rd generation test tool developed by Ruckus to assist in wireless network test and characterization. In the common use case it works by sending bursts of 50 full-size UDP packets. The packet loss and inter-arrival times are monitored and reported. The primary results reported are number of packets lost, total packets received, and detailed throughput statistics. The Zap server is run as a background process each time the WLAN Pi boots, so does not require any additional steps to activate. Performance tests are run by installing the Speedflex app on a mobile device. Usage The Ruckus Speedflex App is available for Android and iOS. Just launch the app on your mobile device and set the IP address of your WLAN Pi as the \"Destination Address\" and any other changes under \"Configuration\". Finally, hit \"Run Test\". The app is now quite old, so not all settings may work on the latest versions. (Contributed by Ian Stout)","title":"Ruckus Zap"},{"location":"pkg_perf_zap/#zap","text":"Zap is a 3rd generation test tool developed by Ruckus to assist in wireless network test and characterization. In the common use case it works by sending bursts of 50 full-size UDP packets. The packet loss and inter-arrival times are monitored and reported. The primary results reported are number of packets lost, total packets received, and detailed throughput statistics. The Zap server is run as a background process each time the WLAN Pi boots, so does not require any additional steps to activate. Performance tests are run by installing the Speedflex app on a mobile device.","title":"Zap"},{"location":"pkg_perf_zap/#usage","text":"The Ruckus Speedflex App is available for Android and iOS. Just launch the app on your mobile device and set the IP address of your WLAN Pi as the \"Destination Address\" and any other changes under \"Configuration\". Finally, hit \"Run Test\". The app is now quite old, so not all settings may work on the latest versions. (Contributed by Ian Stout)","title":"Usage"},{"location":"pkg_util_hotspot/","text":"Hotspot Mode Hotspot mode allows the WLAN Pi to become a small-scale AP to allow a variety of tests to be performed. It broadcasts an SSID, allowing the WLAN Pi to be used as a source for wall attenuation measurements ( see this article ). It may also be used to associate a client and perform speedtest measurements using the WLAN Pi's speedtest and iperf capabilities. Finally, it also supports forwarding so that the WLAN Pi may also be connected to an Ethernet port while in hotspot mode and allow a wireless client to connect through to wired network. To access hotspot mode, on the WLAN Pi front panel, select : Menu > Mode > Hotspot References: GitHub site WLAN Pi - Setup a Wi-Fi Hotspot (blog) WLAN Pi - Bridge Wi-Fi Hotspot to Ethernet Interface","title":"Hotspot Mode"},{"location":"pkg_util_hotspot/#hotspot-mode","text":"Hotspot mode allows the WLAN Pi to become a small-scale AP to allow a variety of tests to be performed. It broadcasts an SSID, allowing the WLAN Pi to be used as a source for wall attenuation measurements ( see this article ). It may also be used to associate a client and perform speedtest measurements using the WLAN Pi's speedtest and iperf capabilities. Finally, it also supports forwarding so that the WLAN Pi may also be connected to an Ethernet port while in hotspot mode and allow a wireless client to connect through to wired network. To access hotspot mode, on the WLAN Pi front panel, select : Menu > Mode > Hotspot","title":"Hotspot Mode"},{"location":"pkg_util_hotspot/#references","text":"GitHub site WLAN Pi - Setup a Wi-Fi Hotspot (blog) WLAN Pi - Bridge Wi-Fi Hotspot to Ethernet Interface","title":"References:"},{"location":"pkg_util_profiler/","text":"Profiler The profiler utility is used to determine the 802.11 capabilities of wireless clients. This information is invaluable when designing a wireless LAN, as client characteristics need to be fully understood for the design process. It works by creating a \"dummy AP\" which broadcasts a test SSID. Clients that need to be profiled then attempt to associated with the test SSID. Although the clients cannot join the SSID, their association frames are captured and analyzed to reveal their characteristics. A textual report for each client is created and stored on the WLAN Pi - this may be accessed via the WLAN Pi web GUI. A demonstration of using the profiler is shown in the video below by Jeff Nyman: You can go direct to the video on YouTube using this link . Visit the profiler GitHub site for more details.","title":"Profiler"},{"location":"pkg_util_profiler/#profiler","text":"The profiler utility is used to determine the 802.11 capabilities of wireless clients. This information is invaluable when designing a wireless LAN, as client characteristics need to be fully understood for the design process. It works by creating a \"dummy AP\" which broadcasts a test SSID. Clients that need to be profiled then attempt to associated with the test SSID. Although the clients cannot join the SSID, their association frames are captured and analyzed to reveal their characteristics. A textual report for each client is created and stored on the WLAN Pi - this may be accessed via the WLAN Pi web GUI. A demonstration of using the profiler is shown in the video below by Jeff Nyman: You can go direct to the video on YouTube using this link . Visit the profiler GitHub site for more details.","title":"Profiler"},{"location":"pkg_util_wconsole/","text":"Wi-Fi Console Turn your WLANPi in to a wireless serial console cable It can be annoying to have to sit in an equipment room to use the serial console port on an item of networking equipment. This project allows you to use a WLANPi to connect to your serial console cable via a Wi-Fi link while sat in the comfort of a nearby office, rather than sat with your laptop on the equipment room floor :) The video below provides a demonstration of using wconsole: Checkout these useful links for more information: Wi-Fi Console GitHub page Instructional video from WiFiNigel","title":"Wi-Fi Console"},{"location":"pkg_util_wconsole/#wi-fi-console","text":"Turn your WLANPi in to a wireless serial console cable It can be annoying to have to sit in an equipment room to use the serial console port on an item of networking equipment. This project allows you to use a WLANPi to connect to your serial console cable via a Wi-Fi link while sat in the comfort of a nearby office, rather than sat with your laptop on the equipment room floor :) The video below provides a demonstration of using wconsole: Checkout these useful links for more information: Wi-Fi Console GitHub page Instructional video from WiFiNigel","title":"Wi-Fi Console"},{"location":"pkg_util_wiperf/","text":"Wiperf The WLAN Pi wiperf mode allows you to turn your WLAN Pi in to a wireless client device that runs a series of connectivity and performance tests and reports them back in to Splunk. To find out more about wiperf , please visit the main wiperf project page: link","title":"Wiperf"},{"location":"pkg_util_wiperf/#wiperf","text":"The WLAN Pi wiperf mode allows you to turn your WLAN Pi in to a wireless client device that runs a series of connectivity and performance tests and reports them back in to Splunk. To find out more about wiperf , please visit the main wiperf project page: link","title":"Wiperf"},{"location":"suppliers/","text":"Suppliers Complete Kit Suppliers Wireless LAN Pros store BadgerFi (UK/Europe) NEO2 Suppliers FriendlyArm NEO2 Kit (Note: As of April 2020, we understand that FriendlyArm are no longer producing the NEO2 due to component supply issues. We awaiting details of a replacement device that we can use going forwards) Comfast CF-912 Amazon ebay (Note: this is a search link, check results show correct CF-921AC item)","title":"Suppliers"},{"location":"suppliers/#suppliers","text":"","title":"Suppliers"},{"location":"suppliers/#complete-kit-suppliers","text":"Wireless LAN Pros store BadgerFi (UK/Europe)","title":"Complete Kit Suppliers"},{"location":"suppliers/#neo2-suppliers","text":"FriendlyArm NEO2 Kit (Note: As of April 2020, we understand that FriendlyArm are no longer producing the NEO2 due to component supply issues. We awaiting details of a replacement device that we can use going forwards)","title":"NEO2 Suppliers"},{"location":"suppliers/#comfast-cf-912","text":"Amazon ebay (Note: this is a search link, check results show correct CF-921AC item)","title":"Comfast CF-912"},{"location":"support/","text":"Support As this project is provided by a team of volunteers, any support around the configuration and operation of your WLANPi is provided on a best-efforts basis. If you have hardware issues, you will need to contact the supplier of your hardware. For all other issues the best ways to contact the team are: via Twitter (hashtag #WLANPi or Twitter account @WLANPi ) the Wireless LAN Pros Slack group (it has a #WLANPi channel - @Sam Clements may be able to get you set up with an account if needed). Another option may be to have a look through GitHub and see if you can find the original author of the module you are having issues with and drop them a note.","title":"Support"},{"location":"support/#support","text":"As this project is provided by a team of volunteers, any support around the configuration and operation of your WLANPi is provided on a best-efforts basis. If you have hardware issues, you will need to contact the supplier of your hardware. For all other issues the best ways to contact the team are: via Twitter (hashtag #WLANPi or Twitter account @WLANPi ) the Wireless LAN Pros Slack group (it has a #WLANPi channel - @Sam Clements may be able to get you set up with an account if needed). Another option may be to have a look through GitHub and see if you can find the original author of the module you are having issues with and drop them a note.","title":"Support"},{"location":"useful_links/","text":"Useful Links Here is a collection of useful articles and resources that may help you on your WLANPi journey: Development: WLANPi GitHub site WLANPi.com Articles Remote access to a device behind NAT/Firewall","title":"Useful Links"},{"location":"useful_links/#useful-links","text":"Here is a collection of useful articles and resources that may help you on your WLANPi journey:","title":"Useful Links"},{"location":"useful_links/#development","text":"WLANPi GitHub site WLANPi.com","title":"Development:"},{"location":"useful_links/#articles","text":"Remote access to a device behind NAT/Firewall","title":"Articles"},{"location":"videos/","text":"WLAN Pi Videos There have been quite a few videos made by members of the WLAN Pi Community that might help you learn more about the WLAN Pi. Check them out below: (May 2020) Coffee Hour - Remote Troubleshooting w/ WLAN Pi, Python Scripting (Francois Verges & Rowell Dionicio) (May 2020) How to access the CLI of the WLANPi (WiFiNigel) (May 2020) 10 Easy Things To Do With a WLAN Pi (WiFiNigel) (March 2020) WLAN Pi With Comfast CF-912AC Adapter GUI and SSH (WiFi Viking) (Feb 2020) Using Profiler with the WLanPi, using DFS channels (Whyf16uy) (Jan 2020) How to Burn a New Image on Your WLAN Pi (WiFiNigel) (Feb 2020) WLAN PI Project Update | Jerry Olla | WLPC Phoenix 2020 (Nov 2019) Using the WLANPi as a wireless serial console (WiFiNigel) (Nov 2019 )Wireshark plugin for WLANPi wireless captures using Windows 10 (WiFiNigel) (Oct 2019) WLAN Pi Case Development | Joel Crane | WLPC Prague 2019 (Aug 2019) Customize Your WLAN Pi (Francois Verges) (Feb 2019) WLAN Pi Project | Jerry Olla | WLPC Phoenix 2019 (June 2018) WLAN Pi assembly guide","title":"Videos"},{"location":"videos/#wlan-pi-videos","text":"There have been quite a few videos made by members of the WLAN Pi Community that might help you learn more about the WLAN Pi. Check them out below: (May 2020) Coffee Hour - Remote Troubleshooting w/ WLAN Pi, Python Scripting (Francois Verges & Rowell Dionicio) (May 2020) How to access the CLI of the WLANPi (WiFiNigel) (May 2020) 10 Easy Things To Do With a WLAN Pi (WiFiNigel) (March 2020) WLAN Pi With Comfast CF-912AC Adapter GUI and SSH (WiFi Viking) (Feb 2020) Using Profiler with the WLanPi, using DFS channels (Whyf16uy) (Jan 2020) How to Burn a New Image on Your WLAN Pi (WiFiNigel) (Feb 2020) WLAN PI Project Update | Jerry Olla | WLPC Phoenix 2020 (Nov 2019) Using the WLANPi as a wireless serial console (WiFiNigel) (Nov 2019 )Wireshark plugin for WLANPi wireless captures using Windows 10 (WiFiNigel) (Oct 2019) WLAN Pi Case Development | Joel Crane | WLPC Prague 2019 (Aug 2019) Customize Your WLAN Pi (Francois Verges) (Feb 2019) WLAN Pi Project | Jerry Olla | WLPC Phoenix 2019 (June 2018) WLAN Pi assembly guide","title":"WLAN Pi Videos"},{"location":"v2/","text":"Welcome to the WLAN Pi Documentation Project (Image v2.x.x) Welcome to home of the new WLAN Pi v2 documentation site. The WLAN Pi community team has been working hard behind the scenes over the last few months to bring you the next generation of of the WLAN Pi. In the very near future we're going to be release v2 of the WLAN Pi with lot of enhancements to make your favourite WLAN box of tricks even better. Stay up to date by checking us out on Twitter .","title":"Home"},{"location":"v2/#welcome-to-the-wlan-pi-documentation-project-image-v2xx","text":"Welcome to home of the new WLAN Pi v2 documentation site. The WLAN Pi community team has been working hard behind the scenes over the last few months to bring you the next generation of of the WLAN Pi. In the very near future we're going to be release v2 of the WLAN Pi with lot of enhancements to make your favourite WLAN box of tricks even better. Stay up to date by checking us out on Twitter .","title":"Welcome to the WLAN Pi Documentation Project (Image v2.x.x)"},{"location":"v2/faq/","text":"FAQ Where can I get the latest WLAN Pi image? TBA - new process for V2.x.x How do I find which image version is currently installed on my WLAN? If you look on the top-level \"home\" page of the front panel display, the version number of the image should be shown on the top left of the display. If you see no version number, it may be that you have quite an old version of image. If you have network connectivity to the WLAN Pi, browse to it (169.254.42.1 if you're on the USB OTG connection) and look at the bottom right of the web page to see the image version. How do I burn a WLAN Pi image? If you'd like to burn a WLAN Pi image on to a kit you've bought or update the image of your existing WLAN Pi, here is a video explaining the process: How do I change the password for the wlanpi user Changing the default password for the wlanpi user is highly recommended to help secure your unit. To change from the default password (which is 'wlanpi'), SSH to the WLANP Pi and use the 'passwd' command as follows: wlanpi@wlanpi:~$ passwd Changing password for wlanpi. (current) UNIX password: wlanpi Enter new UNIX password: <enter new pwd> Retype new UNIX password: <enter new pwd again> passwd: password updated successfully wlanpi@wlanpi:~$ If connecting the WLAN Pi to any network, changing the default password should be a top priority. If the WLAN Pi becomes compromised as default credentials have been left in place, this could have very serious consequences. How do I change the hostname of my WLAN Pi By default, the hostname of your WLAN Pi is : wlanpi If you'd like to change this to a more meaningful hostname, then you will need to SSH to your WLAN Pi and update the /etc/hostname and /etc/hosts files, followed by a reboot of the WLAN Pi: Edit the /etc/hostname file using the command: sudo nano /etc/hostname There is a single line that says 'wlanpi'. Change this to your required hostname. Then hit Ctrl-X and \"y\" to save your changes. Alternatively, you may also use the following CLI command to achieve the same result: sudo hostnamectl set-hostname <name> Whichever method is used to update the hostname file, next edit the /etc/hosts file: sudo nano /etc/hosts Change each instance of 'wlanpi' to the new hostname (there are usually two instances). Then hit Ctrl-X and \"y\" to save your changes. Finally, reboot your WLAN Pi: sudo reboot How do I set the timezone on my WLAN Pi? From the CLI of your WLAN Pi: sudo dpkg-reconfigure tzdata How do I connect my WLAN Pi to my wireless network? Assuming your network uses a PSK, simply edit the following files: /etc/network/interfaces /etc/wpa_supplicant/wpa_supplicant.conf /etc/network/interfaces Edit the file as follows: sudo nano /etc/network/interfaces Edit the following section of the file for wlan0: # Wireless adapter #1 # Armbian ships with network-manager installed by default. To save you time # and hassles consider using 'sudo nmtui' instead of configuring Wi-Fi settings # manually. The below lines are only meant as an example how configuration could # be done in an anachronistic way: # allow-hotplug wlan0 iface wlan0 inet dhcp #address 192.168.0.100 #netmask 255.255.255.0 #gateway 192.168.0.1 #dns-nameservers 8.8.8.8 8.8.4.4 # wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf # Disable power saving on compatible chipsets (prevents SSH/connection dropouts over WiFi) wireless-mode Monitor #wireless-power off Remove the \"#\" character from the start of the line: # wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf Save the file by hitting CTRL-x /etc/wpa_supplicant/wpa_supplicant.conf Edit the file as follows: sudo nano /etc/wpa_supplicant/wpa_supplicant.conf <make your changes> CTRL-x Enter your SSID and PSK in the areas indicated in the file. For the new settings to take effect, you have 3 options: Unplug and re-insert your USB wireless NIC Issue the following command on the WLAN Pi CLI : sudo ifdown wlan0; sudo ifup wlan0 Reboot your WLAN Pi (remove the power or issue the sudo reboot command on the CLI) (For other security methods, look in the following file for configuration examples: /home/wlanpi/wiperf/conf/etc/wpa_supplicant/wpa_supplicant.conf) I'm having difficult getting a connection over the USB link to my WLAN Pi? What's going on? The WLAN Pi has a very useful feature that allows you to connect your Mac or Window machine to a WAN Pi via a USB connection. This is effectively an Ethernet over USB connection, also known as an OTG connection (On The Go). This requires a USB to micro-USB cable to hook up your laptop/Mac to the micro-USB socket on the WLAN Pi (which is also used to power the WLAN Pi). This is very cool as it both powers up your WLAN Pi and gives you a local network connection to the WLAN Pi so that you can SSH or browse in to it. There are two main issues we have seen with connectivity over the OTG connection: Some cables that look like an OTG cable (i.e. a regular USB plug on one end and a micro-USB on the other) are, in fact, just phone charger cables and only have the power wires through. This means there are no data wires and you can never establish the OTG connection. The WLAN Pi will power up, but the OTG connection will not work. (You can check if you have an OTG connection by looking at the network interfaces on your laptop/Mac - if OTG is working, a new Ethernet port automagically appears.) If you hit this issue, try another cable (or two) The second issue we hear about impacts Windows users. Please check out this super blog post if you have a Windows laptop and you think your cable is good: Blog Post Link Which wireless adapters are supported on the WLAN Pi ? TBA - New info pending for v2.x.x Where can I get help support with my WLAN Pi? Support is on a volunteer/best efforts basis by project volunteers. Try here How do I suggest a new feature for the WLAN Pi? If you have a feature suggestion for the WLAN Pi, please get along to the GitHub site for the project and open an issue ticket with your suggestion: link (this will need a (free) GitHub account to create an issue)","title":"FAQ"},{"location":"v2/faq/#faq","text":"","title":"FAQ"},{"location":"v2/faq/#where-can-i-get-the-latest-wlan-pi-image","text":"TBA - new process for V2.x.x","title":"Where can I get the latest WLAN Pi image?"},{"location":"v2/faq/#how-do-i-find-which-image-version-is-currently-installed-on-my-wlan","text":"If you look on the top-level \"home\" page of the front panel display, the version number of the image should be shown on the top left of the display. If you see no version number, it may be that you have quite an old version of image. If you have network connectivity to the WLAN Pi, browse to it (169.254.42.1 if you're on the USB OTG connection) and look at the bottom right of the web page to see the image version.","title":"How do I find which image version is currently installed on my WLAN?"},{"location":"v2/faq/#how-do-i-burn-a-wlan-pi-image","text":"If you'd like to burn a WLAN Pi image on to a kit you've bought or update the image of your existing WLAN Pi, here is a video explaining the process:","title":"How do I burn a WLAN Pi image?"},{"location":"v2/faq/#how-do-i-change-the-password-for-the-wlanpi-user","text":"Changing the default password for the wlanpi user is highly recommended to help secure your unit. To change from the default password (which is 'wlanpi'), SSH to the WLANP Pi and use the 'passwd' command as follows: wlanpi@wlanpi:~$ passwd Changing password for wlanpi. (current) UNIX password: wlanpi Enter new UNIX password: <enter new pwd> Retype new UNIX password: <enter new pwd again> passwd: password updated successfully wlanpi@wlanpi:~$ If connecting the WLAN Pi to any network, changing the default password should be a top priority. If the WLAN Pi becomes compromised as default credentials have been left in place, this could have very serious consequences.","title":"How do I change the password for the wlanpi user"},{"location":"v2/faq/#how-do-i-change-the-hostname-of-my-wlan-pi","text":"By default, the hostname of your WLAN Pi is : wlanpi If you'd like to change this to a more meaningful hostname, then you will need to SSH to your WLAN Pi and update the /etc/hostname and /etc/hosts files, followed by a reboot of the WLAN Pi: Edit the /etc/hostname file using the command: sudo nano /etc/hostname There is a single line that says 'wlanpi'. Change this to your required hostname. Then hit Ctrl-X and \"y\" to save your changes. Alternatively, you may also use the following CLI command to achieve the same result: sudo hostnamectl set-hostname <name> Whichever method is used to update the hostname file, next edit the /etc/hosts file: sudo nano /etc/hosts Change each instance of 'wlanpi' to the new hostname (there are usually two instances). Then hit Ctrl-X and \"y\" to save your changes. Finally, reboot your WLAN Pi: sudo reboot","title":"How do I change the hostname of my WLAN Pi"},{"location":"v2/faq/#how-do-i-set-the-timezone-on-my-wlan-pi","text":"From the CLI of your WLAN Pi: sudo dpkg-reconfigure tzdata","title":"How do I set the timezone on my WLAN Pi?"},{"location":"v2/faq/#how-do-i-connect-my-wlan-pi-to-my-wireless-network","text":"Assuming your network uses a PSK, simply edit the following files: /etc/network/interfaces /etc/wpa_supplicant/wpa_supplicant.conf","title":"How do I connect my WLAN Pi to my wireless network?"},{"location":"v2/faq/#etcnetworkinterfaces","text":"Edit the file as follows: sudo nano /etc/network/interfaces Edit the following section of the file for wlan0: # Wireless adapter #1 # Armbian ships with network-manager installed by default. To save you time # and hassles consider using 'sudo nmtui' instead of configuring Wi-Fi settings # manually. The below lines are only meant as an example how configuration could # be done in an anachronistic way: # allow-hotplug wlan0 iface wlan0 inet dhcp #address 192.168.0.100 #netmask 255.255.255.0 #gateway 192.168.0.1 #dns-nameservers 8.8.8.8 8.8.4.4 # wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf # Disable power saving on compatible chipsets (prevents SSH/connection dropouts over WiFi) wireless-mode Monitor #wireless-power off Remove the \"#\" character from the start of the line: # wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf Save the file by hitting CTRL-x","title":"/etc/network/interfaces"},{"location":"v2/faq/#etcwpa_supplicantwpa_supplicantconf","text":"Edit the file as follows: sudo nano /etc/wpa_supplicant/wpa_supplicant.conf <make your changes> CTRL-x Enter your SSID and PSK in the areas indicated in the file. For the new settings to take effect, you have 3 options: Unplug and re-insert your USB wireless NIC Issue the following command on the WLAN Pi CLI : sudo ifdown wlan0; sudo ifup wlan0 Reboot your WLAN Pi (remove the power or issue the sudo reboot command on the CLI) (For other security methods, look in the following file for configuration examples: /home/wlanpi/wiperf/conf/etc/wpa_supplicant/wpa_supplicant.conf)","title":"/etc/wpa_supplicant/wpa_supplicant.conf"},{"location":"v2/faq/#im-having-difficult-getting-a-connection-over-the-usb-link-to-my-wlan-pi-whats-going-on","text":"The WLAN Pi has a very useful feature that allows you to connect your Mac or Window machine to a WAN Pi via a USB connection. This is effectively an Ethernet over USB connection, also known as an OTG connection (On The Go). This requires a USB to micro-USB cable to hook up your laptop/Mac to the micro-USB socket on the WLAN Pi (which is also used to power the WLAN Pi). This is very cool as it both powers up your WLAN Pi and gives you a local network connection to the WLAN Pi so that you can SSH or browse in to it. There are two main issues we have seen with connectivity over the OTG connection: Some cables that look like an OTG cable (i.e. a regular USB plug on one end and a micro-USB on the other) are, in fact, just phone charger cables and only have the power wires through. This means there are no data wires and you can never establish the OTG connection. The WLAN Pi will power up, but the OTG connection will not work. (You can check if you have an OTG connection by looking at the network interfaces on your laptop/Mac - if OTG is working, a new Ethernet port automagically appears.) If you hit this issue, try another cable (or two) The second issue we hear about impacts Windows users. Please check out this super blog post if you have a Windows laptop and you think your cable is good: Blog Post Link","title":"I'm having difficult getting a connection over the USB link to my WLAN Pi? What's going on?"},{"location":"v2/faq/#which-wireless-adapters-are-supported-on-the-wlan-pi","text":"TBA - New info pending for v2.x.x","title":"Which wireless adapters are supported on the WLAN Pi ?"},{"location":"v2/faq/#where-can-i-get-help-support-with-my-wlan-pi","text":"Support is on a volunteer/best efforts basis by project volunteers. Try here","title":"Where can I get help support with my WLAN Pi?"},{"location":"v2/faq/#how-do-i-suggest-a-new-feature-for-the-wlan-pi","text":"If you have a feature suggestion for the WLAN Pi, please get along to the GitHub site for the project and open an issue ticket with your suggestion: link (this will need a (free) GitHub account to create an issue)","title":"How do I suggest a new feature for the WLAN Pi?"},{"location":"v2/pkg_util_profiler/","text":"Profiler The profiler utility is used to determine the 802.11 capabilities of wireless clients. This information is invaluable when designing a wireless LAN, as client characteristics need to be fully understood for the design process. It works by creating a \"dummy AP\" which broadcasts a test SSID. Clients that need to be profiled then attempt to associated with the test SSID. Although the clients cannot join the SSID, their association frames are captured and analyzed to reveal their characteristics. A textual report for each client is created and stored on the WLAN Pi - this may be accessed via the WLAN Pi web GUI. TBA - New information pending for V2.x.x image","title":"Profiler"},{"location":"v2/pkg_util_profiler/#profiler","text":"The profiler utility is used to determine the 802.11 capabilities of wireless clients. This information is invaluable when designing a wireless LAN, as client characteristics need to be fully understood for the design process. It works by creating a \"dummy AP\" which broadcasts a test SSID. Clients that need to be profiled then attempt to associated with the test SSID. Although the clients cannot join the SSID, their association frames are captured and analyzed to reveal their characteristics. A textual report for each client is created and stored on the WLAN Pi - this may be accessed via the WLAN Pi web GUI. TBA - New information pending for V2.x.x image","title":"Profiler"}]}